{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>MLCFlow: Simplifying MLPerf Automations</p> <p> </p> <p> </p> <p>MLCFlow is a versatile CLI and Python interface developed by MLCommons in collaboration with a dedicated team of volunteers (see Contributors). It serves as a streamlined replacement for the CMind tool, designed to drive the automation workflows of MLPerf benchmarks more efficiently. You can use this tool for any of your workflow automation tasks. </p> <p>The concept behind CMind originated from Grigori Fursin, while the MLPerf Automations project was created by Grigori Fursin and Arjun Suresh, whose collective contributions laid the foundation for modernizing MLPerf benchmarking tools. MLCFlow is a complete replacement for the CMind package with an entirely new implementation led by Arjun Suresh and Anandhu Sooraj, with support from the MLCFlow community. The script automation used in MLCFlow is inherited from the CM project but is now modified to support MLC and provides a simpler interface to the devlopers. Please see the documentation for more details. </p> <p>On February 9, 2025, MLCFlow released its first stable version, 1.0.0.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>Building upon the core idea of CMind\u2014wrapping native scripts with Python wrappers and YAML metadata\u2014MLCFlow focuses exclusively on key automation components: Scripts, along with its complementary modules: Cache, Docker, and Experiments. This targeted design simplifies both implementation and interface, enabling a more user-friendly experience.</p>"},{"location":"#status","title":"Status","text":"<p>MLCFlow is now fully equipped for workflow development, with complete support for all previously used CM scripts in MLPerf inference automation. If you're interested in discussions, join the MLCommons Benchmark Infra Discord channel, and check out the latest progress in Issues.</p>"},{"location":"#mlc-cli-overview","title":"MLC CLI Overview","text":"<p>The MLC Command-Line Interface (CLI) enables users to perform actions on specified targets using a simple syntax:</p> <pre><code>mlc &lt;action&gt; &lt;target&gt; [options]\n</code></pre>"},{"location":"#key-components","title":"Key Components:","text":"<ul> <li><code>&lt;action&gt;</code>: The operation to be performed.</li> <li><code>&lt;target&gt;</code>: The object on which the action is executed.</li> <li><code>[options]</code>: Additional parameters passed to the action.</li> </ul>"},{"location":"#supported-targets-and-actions","title":"Supported Targets and Actions","text":""},{"location":"#1-repo","title":"1. Repo","text":"<ul> <li>Actions related to repositories, such as cloning or updating.</li> </ul>"},{"location":"#2-script","title":"2. Script","text":"<ul> <li>Manage or execute automation scripts.</li> </ul>"},{"location":"#3-cache","title":"3. Cache","text":"<ul> <li>Handle cached data, including cleanup or inspection.</li> </ul> <p>Each target has its own set of specific actions to tailor automation workflows as specified below.</p> Target Action script run, find/search, rm, mv, cp, add, test, docker, show cache find/search, rm, show repo pull, search, rm, list, find/search , add <p>MLC started with a compatibility layer where by it supported MLCommons CM automations - Script, Cache and Experiment. Now, MLCFLow has just the Script Automation which is an extension of the Script Automation from CM but with a cleaner integration of Cache Automation and Docker and Test extensions. The old CM scripts are now updated with the latest MLCFlow scripts in the MLPerf Automations repository. </p>"},{"location":"#architectural-diagram","title":"Architectural Diagram","text":"<pre><code>classDiagram\n    class Action {\n        +access(options)\n        +find_target_folder(target)\n        +load_repos_and_meta()\n        +load_repos()\n        +conflicting_repo(repo_meta)\n        +register_repo(repo_meta)\n        +unregister_repo(repo_path)\n        +add(i)\n        +rm(i)\n        +save_new_meta(i, item_id, item_name, target_name, item_path, repo)\n        +update(i)\n        +is_uid(name)\n        +cp(run_args)\n        +copy_item(source_path, destination_path)\n        +search(i)\n    }\n    class RepoAction {\n        +find(run_args)\n        +github_url_to_user_repo_format(url)\n        +pull_repo(repo_url, branch, checkout)\n        +pull(run_args)\n        +list(run_args)\n        +rm(run_args)\n    }\n    class ScriptAction {\n        +search(i)\n        +rm(i)\n        +dynamic_import_module(script_path)\n        +call_script_module_function(function_name, run_args)\n        +docker(run_args)\n        +run(run_args)\n        +test(run_args)\n        +list(args)\n    }\n    class CacheAction {\n        +search(i)\n        +find(i)\n        +rm(i)\n        +show(run_args)\n        +list(args)\n    }\n    class ExperimentAction {\n        +show(args)\n        +list(args)\n    }\n    class CfgAction {\n        +load(args)\n    }\n    class Index {\n        +add(meta, folder_type, path, repo)\n        +get_index(folder_type, uid)\n        +update(meta, folder_type, path, repo)\n        +rm(meta, folder_type, path)\n        +build_index()\n    }\n    class Item {\n        +meta\n        +path\n        +repo\n        +_load_meta()\n    }\n    class Repo {\n        +path\n        +meta\n        +_load_meta()\n    }\n    class Automation {\n        +action_object\n        +automation_type\n        +meta\n        +path\n        +_load_meta()\n        +search(i)\n    }\n\n    Action &lt;|-- RepoAction\n    Action &lt;|-- ScriptAction\n    Action &lt;|-- CacheAction\n    Action &lt;|-- ExperimentAction\n    Action &lt;|-- CfgAction\n    RepoAction o-- Repo\n    ScriptAction o-- Automation\n    CacheAction o-- Index\n    ExperimentAction o-- Index\n    CfgAction o-- Index\n    Index o-- Repo\n    Index o-- Item\n    Item o-- Repo\n    Automation o-- Action</code></pre>"},{"location":"error_codes/","title":"Error and Warning Codes in MLCFlow","text":"<p>MLCFlow uses a standardized system for error and warning codes to provide consistent error handling across the framework. This document explains the error code system and how to use it.</p>"},{"location":"error_codes/#overview","title":"Overview","text":"<p>The error code system consists of two main components:</p> <ol> <li>WarningCode(1000-1007): Enum class for warning codes (return = 0, with warning_code field)</li> <li>ErrorCode(2000-2007): Enum class for error codes (return &gt; 0)</li> </ol>"},{"location":"error_codes/#usage","title":"Usage","text":""},{"location":"error_codes/#in-mlcflow-framework","title":"In MLCFlow Framework","text":"<p>When returning an error:</p> <pre><code>from mlc.error_codes import ErrorCode, get_error_message\n\nreturn {'return': ErrorCode.UNSUPPORTED_OS.code, 'error': get_error_message(ErrorCode.UNSUPPORTED_OS.description)}\n</code></pre> <p>When returning a warning:</p> <pre><code>from mlc.error_codes import WarningCode, get_warning_message\n\nreturn {'return': 0, 'warning_code': WarningCode.ELEVATED_PERMISSION_NEEDED.code, 'warning': get_warning_message(WarningCode.ELEVATED_PERMISSION_NEEDED.description)}\n</code></pre>"},{"location":"error_codes/#in-scripts","title":"In Scripts","text":"<p>When checking for errors or warnings:</p> <pre><code>from mlc.error_codes import is_warning_code\n\nresult = mlc_cache.access({'action': 'rm', 'target': 'cache', 'tags': cache_rm_tags, 'f': True})\nif result['return'] != 0 and not is_warning_code(result['return']):\n    # Handle error\n    return result\n</code></pre>"},{"location":"error_codes/#helper-functions","title":"Helper Functions","text":"<p>The error code system provides several helper functions:</p> <ul> <li><code>get_error_message(error_code)</code>: Get the description for an error code</li> <li><code>get_warning_message(warning_code)</code>: Get the description for a warning code</li> <li><code>is_warning_code(code)</code>: Check if a code is a warning code</li> <li><code>is_error_code(code)</code>: Check if a code is an error code</li> <li><code>get_code_type(code)</code>: Get the type of a code (error, warning, or unknown)</li> </ul>"},{"location":"error_codes/#adding-new-error-or-warning-codes","title":"Adding New Error or Warning Codes","text":"<p>To add a new error or warning code, update the appropriate enum class in <code>mlc/error_codes.py</code>:</p> <pre><code># For a new error code\nNEW_ERROR = (2008, \"Description of the new error\")\n\n# For a new warning code\nNEW_WARNING = (1007, \"Description of the new warning\")\n</code></pre> <p>Make sure to follow the category structure and use the next available code in the appropriate range. </p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#dependencies","title":"Dependencies","text":"<p>MLCFlow needs <code>python&gt;=3.7</code>, <code>python3-pip</code>, <code>python3-venv</code> and <code>git</code> installed on your system.</p> UbuntuRedHatArchmacOSWindows <pre><code>sudo apt-get install -y python3-dev python3-venv python3-pip git wget sudo unzip curl\n</code></pre> <pre><code>sudo dnf install -y python3-dev python3-pip git wget sudo unzip binutils curl\n</code></pre> <pre><code>sudo pacman -Sy python python-pip git wget sudo binutils curl\n</code></pre> <pre><code>brew install python git wget binutils curl\n</code></pre> <p>WinGet the Windows Package Manager is available on Windows 11, modern versions of Windows 10, and Windows Server 2025 as a part of the App Installer. For more information visit mirosoft's site.</p> <pre><code>winget install wget Git.Git python3 cURL.cURL unzip --accept-package-agreements\n</code></pre>"},{"location":"install/#activate-a-virtual-env-for-mlcflow-optional","title":"Activate a Virtual ENV for MLCFlow (Optional)","text":"<p>This step is not mandatory. But the latest <code>pip</code> install requires this or else will need the <code>--break-system-packages</code> flag while installing.</p> UnixWindows <pre><code>python3 -m venv mlcflow\n. mlcflow/bin/activate\n</code></pre> <p><pre><code>python -m venv mlcflow\nmlcflow\\Scripts\\activate.bat\n</code></pre> Run as Administrator <pre><code>git config --system core.longpaths true\n</code></pre></p>"},{"location":"install/#install-mlcflow","title":"Install MLCFLow","text":"<p>If you are not using virtual ENV for installation, the latest <code>pip</code> install requires the <code>--break-system-packages</code> flag while installing.</p> <pre><code>pip install mlcflow\n</code></pre>"},{"location":"install/#pull-the-automation-repo","title":"Pull the Automation Repo","text":"<p><pre><code>mlc pull repo mlcommons@mlperf-automations\n</code></pre> * If you are forking https://github.com/mlcommons/mlperf-automations you can substitute the above command by <code>mlc pull repo &lt;your_github_username&gt;@mlperf-automations</code>.</p> <p>Tip</p> <p>If you want to pull the latest changes (recommended), please do <code>mlc pull repo</code> periodically.</p> <p>Now, you are ready to use the <code>mlc</code> commands. Currently, <code>mlc</code> is being used to automate the benchmark runs for:</p> <ul> <li>MLPerf Inference</li> </ul>"},{"location":"targets/cache/","title":"Cache","text":"<p>Currently, the following actions are supported for cache:</p>"},{"location":"targets/cache/#find","title":"Find","text":"<p><code>find</code> action is used to list the path of the cache generated while running scripts through MLC.</p> <p>Syntax</p> <pre><code>mlc find cache --tags=&lt;list_of_tags_used_while_running_script&gt;\n</code></pre> <p>Examples of <code>find</code> action for <code>cache</code> target could be found inside the GitHub action workflow here.</p>"},{"location":"targets/cache/#show","title":"Show","text":"<p><code>show</code> action is used to list the path and meta data of the cache generated while running scripts through MLC.</p> <p>Syntax</p> <pre><code>mlc show cache --tags=&lt;list_of_tags_used_while_running_script&gt;\n</code></pre> <p>Examples of <code>show</code> action for <code>cache</code> target could be found inside the GitHub action workflow here.</p>"},{"location":"targets/cache/#rm","title":"Rm","text":"<p><code>rm</code> action is used to remove one/more caches generated while running scripts through MLC.</p> <p>Syntax</p> <pre><code>mlc rm cache --tags=&lt;list_of_tags_used_while_running_script&gt;\n</code></pre> <p>A user  could delete the entire generated caches through the following command:</p> <pre><code>mlc rm cache\n</code></pre> <p><code>-f</code> could be used to force remove caches. Without <code>-f</code>, user would be prompted for confirmation to delete a cache.</p> <p>Examples of <code>rm</code> action for <code>cache</code> target could be found inside the GitHub action workflow here.</p>"},{"location":"targets/repo/","title":"Repo","text":"<p>Currently, the following actions are supported for repos:</p>"},{"location":"targets/repo/#syntax-variations","title":"Syntax Variations","text":"<p>In MLCFlow, repos can be identified in different ways:  </p> <ol> <li>Using MLC repo folder name format: <code>&lt;repoowner@reponame&gt;</code> (e.g.,<code>mlcommons@mlperf-automations</code>)</li> <li>Using alias: <code>&lt;repo_alias&gt;</code>  (e.g., <code>mlcommons@mlperf-automations</code>)  </li> <li>Using UID: <code>&lt;repo_uid&gt;</code>  (e.g., <code>9cf241afa6074c89</code>)  </li> <li>Using both alias and UID: <code>&lt;repo_alias&gt;,&lt;repo_uid&gt;</code> (e.g., <code>mlcommons@mlperf-automations,9cf241afa6074c89</code>)</li> <li>Using URL: <code>&lt;repo_url&gt;</code> (e.g., <code>https://github.com/mlcommons/mlperf-automations</code>)  </li> </ol> <p>Note</p> <ul> <li><code>repo uid</code> and <code>repo alias</code> for a particular MLC repository can be found inside <code>meta.yml</code> file.</li> <li>For simplicity, syntax variations are only shown for the <code>find</code> action, but similar options apply to all other actions.  </li> </ul>"},{"location":"targets/repo/#find","title":"Find","text":"<p><code>find</code> action retrieves the path of a specific repository registered in MLCFlow.</p>"},{"location":"targets/repo/#syntax-variations_1","title":"Syntax Variations","text":"Command Format Example Usage <code>mlc find repo &lt;repo_owner@repo_name&gt;</code> <code>mlc find repo mlcommons@mlperf-automations</code> <code>mlc find repo &lt;repo_alias&gt;</code> <code>mlc find repo mlcommons@mlperf-automations</code> <code>mlc find repo &lt;repo_uid&gt;</code> <code>mlc find repo 9cf241afa6074c89</code> <code>mlc find script &lt;repo_alias&gt;,&lt;repo_uid&gt;</code> <code>mlc find repo mlcommons@mlperf-automations,9cf241afa6074c89</code> <code>mlc find repo &lt;repo_url&gt;</code> <code>mlc find repo https://github.com/mlcommons/mlperf-automations</code> <p>Examples of <code>find</code> action for <code>repo</code> target can be found inside the GitHub action workflow here.</p> Example Output \ud83d\udccc <pre><code>anandhu@anandhu-VivoBook-ASUSLaptop-X515UA-M515UA:~$ mlc find repo mlcommons@mlperf-automations\n[2025-02-19 15:32:18,352 main.py:1737 INFO] - Item path: /home/anandhu/MLC/repos/mlcommons@mlperf-automations\n</code></pre>"},{"location":"targets/repo/#add","title":"Add","text":"<p><code>add</code> action is used to create a new MLC repo and register in MLCFlow. The newly created repo folder will be present inside the <code>repos</code> folder within the parent <code>MLC</code> directory.</p> <p>Example Command</p> <pre><code>mlc add repo mlcommons@script-automations\n</code></pre> Example Output \ud83d\udccc <pre><code>  anandhu@anandhu-VivoBook-ASUSLaptop-X515UA-M515UA:~$ mlc add repo mlcommons@script-automations\n  [2025-02-19 16:34:37,570 main.py:1085 INFO] - New repo path: /home/anandhu/MLC/repos/mlcommons@script-automations\n  [2025-02-19 16:34:37,573 main.py:1126 INFO] - Added new repo path: /home/anandhu/MLC/repos/mlcommons@script-automations\n  [2025-02-19 16:34:37,573 main.py:1130 INFO] - Updated repos.json at /home/anandhu/MLC/repos/repos.json\n</code></pre> <p>Examples of <code>add</code> action for <code>repo</code> target could be found inside the GitHub action workflow here.</p> <p>Note</p> <ul> <li><code>repo_uid</code> is not supported in the <code>add</code> action for <code>repo</code> target since <code>uid</code> for the repo is assigned automatically while creating the repository. </li> </ul>"},{"location":"targets/repo/#pull","title":"Pull","text":"<p><code>pull</code> action clones an MLC repository and registers it in MLC.</p> <p>If the repository already exists locally in MLC repos directory, it fetches the latest changes if there are no uncommited modifications(does not include untracked files/folders). The <code>pull</code> action could be also used to checkout to a particular branch or release tag with flags <code>--checkout</code> and <code>--tag</code>.</p> <p>Example Command</p> <pre><code>mlc pull repo mlcommons@mlperf-automations\n</code></pre> Example Output \ud83d\udccc <pre><code>  anandhu@anandhu-VivoBook-ASUSLaptop-X515UA-M515UA:~$ mlc pull repo mlcommons@mlperf-automations\n  [2025-02-19 16:46:27,208 main.py:1260 INFO] - Cloning repository https://github.com/mlcommons/mlperf-automations.git to /home/anandhu/MLC/repos/mlcommons@mlperf-automations...\n  Cloning into '/home/anandhu/MLC/repos/mlcommons@mlperf-automations'...\n  remote: Enumerating objects: 77610, done.\n  remote: Counting objects: 100% (2199/2199), done.\n  remote: Compressing objects: 100% (1103/1103), done.\n  remote: Total 77610 (delta 1616), reused 1109 (delta 1095), pack-reused 75411 (from 2)\n  Receiving objects: 100% (77610/77610), 18.36 MiB | 672.00 KiB/s, done.\n  Resolving deltas: 100% (53818/53818), done.\n  [2025-02-19 16:46:57,604 main.py:1288 INFO] - Repository successfully pulled.\n  [2025-02-19 16:46:57,605 main.py:1289 INFO] - Registering the repo in repos.json\n  [2025-02-19 16:46:57,605 main.py:1126 INFO] - Added new repo path: /home/anandhu/MLC/repos/mlcommons@mlperf-automations\n  [2025-02-19 16:46:57,606 main.py:1130 INFO] - Updated repos.json at /home/anandhu/MLC/repos/repos.json\n</code></pre> <ul> <li>The <code>--checkout</code> flag can be used if a user needs to check out a specific commit or branch after cloning. The user must provide the commit SHA if they want to check out a specific commit. This flag can be used in cases where the repository exists locally.</li> <li>The <code>--branch</code> flag can be used if a user needs to check out a specific branch after cloning. The user must provide the branch name. This flag will only work when cloning a new repository.</li> <li>The <code>--tag</code> flag can be used to check out a particular release tag.</li> <li><code>--pat=&lt;access_token&gt;</code> or <code>--ssh</code> flag can be used to clone a private repository.</li> </ul> <p>Examples of <code>pull</code> action for <code>repo</code> target could be found inside the GitHub action workflow here.</p> <p>Note</p> <ul> <li><code>repo_uid</code> and <code>repo_alias</code> are not supported in the <code>pull</code> action for the <code>repo</code> target.  </li> <li>Only one of <code>--checkout</code>, <code>--branch</code>, or <code>--tag</code> should be specified when using this action.  </li> </ul>"},{"location":"targets/repo/#list","title":"List","text":"<p><code>list</code> action displays all registered MLC repositories along with their aliases and paths.</p> <p>Example Command</p> <pre><code>mlc list repo\n</code></pre> Example Output \ud83d\udccc <pre><code>  anandhu@anandhu-VivoBook-ASUSLaptop-X515UA-M515UA:~$ mlc list repo\n  [2025-02-19 16:56:31,847 main.py:1349 INFO] - Listing all repositories.\n\n  Repositories:\n  -------------\n  - Alias: local\n  Path:  /home/anandhu/MLC/repos/local\n\n  -  Alias: mlcommons@mlperf-automations\n  Path:  /home/anandhu/MLC/repos/mlcommons@mlperf-automations\n\n  -------------\n  [2025-02-19 16:56:31,850 main.py:1356 INFO] - Repository listing ended\n</code></pre> <p>Example of <code>list</code> action for <code>repo</code> target could be found inside the GitHub action workflow here.</p>"},{"location":"targets/repo/#rm-remove","title":"Rm (Remove)","text":"<p><code>rm</code> action removes a specified repository from MLCFlow, deleting both the repo folder and its registration. If there are any modified local changes, the user will be prompted for confirmation unless the <code>-f</code> flag is used to force removal.</p> <p>Example Command</p> <pre><code>mlc rm repo mlcommons@mlperf-automations\n</code></pre> Example Output <pre><code>    anandhu@anandhu-VivoBook-ASUSLaptop-X515UA-M515UA:~$ mlc rm repo mlcommons@mlperf-automations\n    [2025-02-19 17:01:59,483 main.py:1360 INFO] - rm command has been called for repo. This would delete the repo folder and unregister the repo from repos.json\n    [2025-02-19 17:01:59,521 main.py:1380 INFO] - No local changes detected. Removing repo...\n    [2025-02-19 17:01:59,581 main.py:1384 INFO] - Repo mlcommons@mlperf-automations residing in path /home/anandhu/MLC/repos/mlcommons@mlperf-automations has been successfully removed\n    [2025-02-19 17:01:59,581 main.py:1385 INFO] - Checking whether the repo was registered in repos.json\n    [2025-02-19 17:01:59,581 main.py:1134 INFO] - Unregistering the repo in path /home/anandhu/MLC/repos/mlcommons@mlperf-automations\n    [2025-02-19 17:01:59,581 main.py:1144 INFO] - Path: /home/anandhu/MLC/repos/mlcommons@mlperf-automations has been removed.\n</code></pre> <p>An example of the <code>rm</code> action for the <code>repo</code> target can be found in the GitHub Actions workflow here.</p>"},{"location":"targets/script/","title":"Script Action","text":"<p>The following actions are supported for managing scripts in MLCFlow.  </p>"},{"location":"targets/script/#syntax-variations","title":"Syntax Variations","text":"<p>MLC scripts can be identified in different ways:  </p> <ol> <li>Using tags: <code>--tags=&lt;comma-separated-tags&gt;</code> (e.g., <code>--tags=detect,os</code>)  </li> <li>Using alias: <code>&lt;script_alias&gt;</code> (e.g., <code>detect-os</code>)  </li> <li>Using UID: <code>&lt;script_uid&gt;</code> (e.g., <code>5b4e0237da074764</code>)  </li> <li>Using both alias and UID: <code>&lt;script_alias&gt;,&lt;script_uid&gt;</code> (e.g., <code>detect-os,5b4e0237da074764</code>)  </li> </ol> <p>Note</p> <p>For simplicity, syntax variations are only shown for the <code>find</code> action, but similar options apply to all other actions.  </p>"},{"location":"targets/script/#findalias-search","title":"Find(Alias: Search)","text":"<p>The <code>find/search</code> action retrieves the path of scripts available in MLC repositories.  </p>"},{"location":"targets/script/#syntax-variations_1","title":"Syntax Variations","text":"Command Format Example Usage <code>mlc find script --tags=&lt;tags&gt;</code> <code>mlc find script --tags=detect,os</code> <code>mlc find script &lt;script_alias&gt;</code> <code>mlc find script detect-os</code> <code>mlc find script &lt;script_uid&gt;</code> <code>mlc find script 5b4e0237da074764</code> <code>mlc find script &lt;script_alias&gt;,&lt;script_uid&gt;</code> <code>mlc find script detect-os,5b4e0237da074764</code> Example Output \ud83d\udccc <pre><code>arjun@intel-spr-i9:~$ mlc find script --tags=detect,os -j\n[2025-02-14 02:55:12,999 main.py:1686 INFO] - Item path: /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/detect-os\n</code></pre> <p>\ud83d\udd39 Example usage: GitHub Workflow </p>"},{"location":"targets/script/#show","title":"Show","text":"<p>Retrieves the path and metadata of scripts in MLC repositories.  </p> <p>Example Command: <pre><code>mlc show script --tags=detect,os\n</code></pre></p> Example Output \ud83d\udccc <pre><code>arjun@intel-spr-i9:~$ mlc show script --tags=detect,os\n[2025-02-14 02:56:16,604 main.py:1404 INFO] - Showing script with tags: detect,os\nLocation: /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/detect-os:\nMain Script Meta:\n    uid: 863735b7db8c44fc\n    alias: detect-os\n    tags: ['detect-os', 'detect', 'os', 'info']\n    new_env_keys: ['MLC_HOST_OS_*', '+MLC_HOST_OS_*', 'MLC_HOST_PLATFORM_*', 'MLC_HOST_PYTHON_*', 'MLC_HOST_SYSTEM_NAME', 'MLC_RUN_STATE_DOCKER', '+PATH']\n    new_state_keys: ['os_uname_*']\n......................................................\nFor full script meta, see meta file at /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/detect-os/meta.yaml\n</code></pre>"},{"location":"targets/script/#add","title":"Add","text":"<p>Creates a new script in a registered MLC repository.  </p> <p>Example Command: <pre><code>mlc add script &lt;user@repo&gt;:new_script --tags=benchmark\n</code></pre></p> <p>Options: - <code>--template_tags</code>: A comma-separated list of tags to create a new MLC script based on existing templates.  </p> Example Output \ud83d\udccc <pre><code>arjun@intel-spr-i9:~$ mlc add script gateoverflow@mlperf-automations --tags=benchmark --template_tags=app,mlperf,inference\nMore than one script found for None:\n1. /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/app-mlperf-inference-mlcommons-python\n2. /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/app-mlperf-inference-ctuning-cpp-tflite\n3. /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/app-mlperf-inference\n4. /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/app-mlperf-inference-mlcommons-cpp\nSelect the correct one (enter number, default=1): 1\n[2025-02-14 02:58:33,453 main.py:664 INFO] - Folder successfully copied from /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/app-mlperf-inference-mlcommons-python to /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/gateoverflow@mlperf-automations\n</code></pre>"},{"location":"targets/script/#move-mv","title":"Move (<code>mv</code>)","text":"<p>Transfers a script between repositories or renames a script within the same repository.  </p> <p>Example Command: <pre><code>mlc mv script &lt;user@source_repo&gt;:script &lt;user@target_repo&gt;:script\n</code></pre></p>"},{"location":"targets/script/#copy-cp","title":"Copy (<code>cp</code>)","text":"<p>Duplicates a script between repositories or within the same repository.  </p> <p>Example Command: <pre><code>mlc cp script &lt;user@source_repo&gt;:script &lt;user@target_repo&gt;:script\n</code></pre></p>"},{"location":"targets/script/#remove-rm","title":"Remove (<code>rm</code>)","text":"<p>Deletes one or more scripts from MLC repositories.  </p> <p>Example Command: <pre><code>mlc rm script --tags=detect,os -f\n</code></pre></p>"},{"location":"targets/script/#list","title":"List","text":"<p>Lists all the scripts and their paths present in repos which are registered in MLC.</p> <p>Example Command: <pre><code>mlc list script\n</code></pre></p>"},{"location":"targets/script/#run","title":"Run","text":"<p>Executes a script from an MLC repository.  </p> <p>Example Command: <pre><code>mlc run script --tags=detect,os -j\n</code></pre></p> <p>Options: </p> <ul> <li> <p><code>-j</code>: Shows the output in a JSON format</p> </li> <li> <p><code>mlcr</code> can be used as a shortcut to <code>mlc run script --tags=</code></p> </li> <li> <p><code>--input</code>:</p> </li> <li> <p><code>--path</code>:</p> </li> <li> <p><code>--outdirname</code>:</p> </li> <li> <p><code>--new</code>:</p> </li> <li> <p><code>--force_cache</code>:</p> </li> <li> <p><code>--version</code>:</p> </li> <li> <p><code>--version_max</code>:</p> </li> <li> <p><code>--version_min</code>:</p> </li> <li> <p><code>--quiet</code>:</p> </li> <li> <p>*<code>&lt;Individual script inputs&gt;</code>: In addition to the above options an <code>mlcr</code> command also takes any input specified with in a script meta in <code>input_mappings</code> as its input.</p> </li> </ul> <p>Log Levels</p> <ul> <li> <p>Default  : Provides all logs at the <code>info</code> level.</p> </li> <li> <p>Silent <code>[--silent/-s]</code>  : Disables all <code>debug</code> and <code>info</code> level logs from automation. Logs from individual scripts will still be visible.</p> </li> <li> <p>verbose <code>[--verbose/-v]</code> : Displays both <code>info</code> and <code>debug</code> level logs from automation, along with logs from individual scripts.</p> </li> </ul> Example Output \ud83d\udccc <pre><code>arjun@arjun-spr:~$ mlcr detect,os -j\n[2025-02-16 03:30:40,702 module.py:560 INFO] - * mlcr detect,os\n[2025-02-16 03:30:40,704 module.py:5334 INFO] -        ! cd /home/arjun\n[2025-02-16 03:30:40,704 module.py:5335 INFO] -        ! call /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/detect-os/run.sh from tmp-run.sh\n[2025-02-16 03:30:40,740 module.py:5481 INFO] -        ! call \"postprocess\" from /home/arjun/MLC/repos/gateoverflow@mlperf-automations/script/detect-os/customize.py\n[2025-02-16 03:30:40,749 module.py:2181 INFO] - {\n  \"return\": 0,\n  \"env\": {\n    \"MLC_HOST_OS_TYPE\": \"linux\",\n    \"MLC_HOST_OS_BITS\": \"64\",\n    \"MLC_HOST_OS_FLAVOR\": \"ubuntu\",\n    \"MLC_HOST_OS_FLAVOR_LIKE\": \"debian\",\n    \"MLC_HOST_OS_VERSION\": \"24.04\",\n    \"MLC_HOST_OS_KERNEL_VERSION\": \"6.8.0-52-generic\",\n    \"MLC_HOST_OS_GLIBC_VERSION\": \"2.39\",\n    \"MLC_HOST_OS_MACHINE\": \"x86_64\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER\": \"apt\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER_INSTALL_CMD\": \"DEBIAN_FRONTEND=noninteractive apt-get install -y\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER_UPDATE_CMD\": \"apt-get update -y\",\n    \"+MLC_HOST_OS_DEFAULT_LIBRARY_PATH\": [\n      \"/usr/local/lib/x86_64-linux-gnu\",\n      \"/lib/x86_64-linux-gnu\",\n      \"/usr/lib/x86_64-linux-gnu\",\n      \"/usr/lib/x86_64-linux-gnu64\",\n      \"/usr/local/lib64\",\n      \"/lib64\",\n      \"/usr/lib64\",\n      \"/usr/local/lib\",\n      \"/lib\",\n      \"/usr/lib\",\n      \"/usr/x86_64-linux-gnu/lib64\",\n      \"/usr/x86_64-linux-gnu/lib\"\n    ],\n    \"MLC_HOST_PLATFORM_FLAVOR\": \"x86_64\",\n    \"MLC_HOST_PYTHON_BITS\": \"64\",\n    \"MLC_HOST_SYSTEM_NAME\": \"arjun-spr\"\n  },\n  \"new_env\": {\n    \"MLC_HOST_OS_TYPE\": \"linux\",\n    \"MLC_HOST_OS_BITS\": \"64\",\n    \"MLC_HOST_OS_FLAVOR\": \"ubuntu\",\n    \"MLC_HOST_OS_FLAVOR_LIKE\": \"debian\",\n    \"MLC_HOST_OS_VERSION\": \"24.04\",\n    \"MLC_HOST_OS_KERNEL_VERSION\": \"6.8.0-52-generic\",\n    \"MLC_HOST_OS_GLIBC_VERSION\": \"2.39\",\n    \"MLC_HOST_OS_MACHINE\": \"x86_64\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER\": \"apt\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER_INSTALL_CMD\": \"DEBIAN_FRONTEND=noninteractive apt-get install -y\",\n    \"MLC_HOST_OS_PACKAGE_MANAGER_UPDATE_CMD\": \"apt-get update -y\",\n    \"+MLC_HOST_OS_DEFAULT_LIBRARY_PATH\": [\n      \"/usr/local/lib/x86_64-linux-gnu\",\n      \"/lib/x86_64-linux-gnu\",\n      \"/usr/lib/x86_64-linux-gnu\",\n      \"/usr/lib/x86_64-linux-gnu64\",\n      \"/usr/local/lib64\",\n      \"/lib64\",\n      \"/usr/lib64\",\n      \"/usr/local/lib\",\n      \"/lib\",\n      \"/usr/lib\",\n      \"/usr/x86_64-linux-gnu/lib64\",\n      \"/usr/x86_64-linux-gnu/lib\"\n    ],\n    \"MLC_HOST_PLATFORM_FLAVOR\": \"x86_64\",\n    \"MLC_HOST_PYTHON_BITS\": \"64\",\n    \"MLC_HOST_SYSTEM_NAME\": \"arjun-spr\"\n  },\n  \"state\": {\n    \"os_uname_machine\": \"x86_64\",\n    \"os_uname_all\": \"Linux arjun-spr 6.8.0-52-generic #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux\"\n  },\n  \"new_state\": {\n    \"os_uname_machine\": \"x86_64\",\n    \"os_uname_all\": \"Linux arjun-spr 6.8.0-52-generic #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux\"\n  },\n  \"deps\": []\n}\n</code></pre>"},{"location":"targets/script/#docker-execution","title":"Docker Execution","text":"<p>Runs scripts inside a containerized environment.  </p> <p>\ud83d\udccc Please refer to the Docker README for the full list of Docker options for MLC scripts.  </p> <p>Example Command: <pre><code>mlc docker script --tags=detect,os -j\n</code></pre></p>"},{"location":"targets/script/#test","title":"Test","text":"<p>Validates scripts configured with a <code>tests</code> section in <code>meta.yaml</code>.  </p> <p>Example Command: <pre><code>mlc test script --tags=benchmark\n</code></pre></p> <p>\ud83d\udd39 Example of test configuration: Meta.yaml Example </p>"},{"location":"targets/script/docker/","title":"Docker Script","text":"<p>MLCFlow enables an MLC script to be run inside a docker container,  enhancing reproducibility by maintaining a consistent execution environment.</p>"},{"location":"targets/script/docker/#syntax-variations","title":"Syntax Variations","text":"<p>An MLCFlow script can be executed inside a Docker container using either of the following syntaxes:</p> <ol> <li>Docker Run: <code>mlc docker run --tags=&lt;script tags&gt; &lt;run flags&gt;</code> (e.g., <code>mlc docker run --tags=detect,os --docker_dt --docker_cache=no</code>)  </li> <li>Docker Script: <code>mlc docker script --tags=&lt;script tags&gt; &lt;run flags&gt;</code> (e.g., <code>mlc docker script --tags=detect,os --docker_dt --docker_cache=no</code>)  </li> </ol>"},{"location":"targets/script/docker/#flags-available","title":"Flags Available","text":"<ul> <li><code>--docker_dt</code> or  <code>--docker_detached</code>: <ul> <li>Runs the specified script inside a Docker container in detached mode (e.g., `mlc docker run --tags=detect,os --docker_dt).</li> <li>By default, the Docker container is launched in interactive mode.</li> </ul> </li> <li><code>--docker_cache</code>: <ul> <li>Disabling the use of the Docker cache will force Docker to build all layers from scratch, ignoring previously cached layers (e.g., <code>mlc docker run --tags=detect,os --docker_cache=no</code>)  </li> <li>By default, the value is set to true/yes.</li> </ul> </li> <li><code>--docker_rebuild</code>: <ul> <li>Enabling this flag will rebuild the Docker container even if there are existing containers with the same tag. (e.g., <code>mlc docker run --tags=detect,os --docker_rebuild</code>)  </li> <li>By default, the value is set to False.</li> </ul> </li> <li><code>--dockerfile_recreate</code>: <ul> <li>Enabling this flag will recreate the Dockerfile on Docker run (e.g., <code>mlc docker run --tags=detect,os --docker_rebuild --dockerfile_recreate</code>)  </li> <li>By default, the value is set to False.</li> </ul> </li> </ul> <p>For more information about the Docker configuration inside the  <code>meta.yaml</code> file, please visit the Script Meta page.</p>"},{"location":"targets/script/execution-flow/","title":"Script Execution","text":""},{"location":"targets/script/execution-flow/#understanding-mlc-scripts","title":"Understanding MLC scripts","text":"<ul> <li>An MLC script is identified by a set of tags and by an unique ID. </li> <li>Further each MLC script can have multiple variations and they are identified by variation tags which are treated in the same way as tags and identified by a <code>_</code> prefix.</li> </ul>"},{"location":"targets/script/execution-flow/#mlc-script-execution-flow","title":"MLC script execution flow","text":"<pre><code>graph TD\n    MLC --&gt;|env = incoming env + env_from_meta| B[Script]\n    B --&gt;|env - local_env_keys| C[List of Dependencies]\n    C --&gt; D[Preprocess]\n    D --&gt;|env - local_env_keys| E[Prehook dependencies]\n    E --&gt;F[Run script]\n    F --&gt;|env - clean_env_keys_post_deps| G[Posthook dependencies]\n    G --&gt; H[Postprocess]\n    H --&gt;|env - clean_env_keys_post_deps| I[Post dependencies]\n    I --&gt;|\"env(new_env_keys)\"| J[Script return]</code></pre> <ul> <li>When an MLC script is invoked (either by tags or by unique ID), its <code>meta.yaml</code> is processed first which will check for any <code>deps</code> script and if there are, then they are executed in order.</li> <li>Once all the <code>deps</code> scripts are executed, <code>customize.py</code> file is checked and if existing <code>preprocess</code> function inside it is executed if present. </li> <li>Then any <code>prehook_deps</code>  scripts mentioned in <code>meta.yaml</code> are executed similar to <code>deps</code></li> <li>After this, keys in <code>env</code> dictionary is exported as <code>ENV</code> variables and <code>run</code> file if exists is executed.</li> <li>Once run file execution is done, any <code>posthook_deps</code> scripts mentioned in <code>meta.yaml</code> are executed similar to <code>deps</code></li> <li>Then <code>postprocess</code> function inside customize.py is executed if present.</li> <li>After this stage any <code>post_deps</code> scripts mentioned in <code>meta.yaml</code> is executed.</li> </ul> <p>If a script is already cached, then the <code>preprocess</code>, <code>run file</code> and <code>postprocess</code> executions won't happen and only the dependencies marked as <code>dynamic</code> will be executed from <code>deps</code>, <code>prehook_deps</code>, <code>posthook_deps</code> and <code>postdeps</code>.</p>"},{"location":"targets/script/execution-flow/#input-flags","title":"Input flags","text":"<p>When we run an MLC script we can also pass inputs to it and any input added in <code>input_mapping</code> dictionary inside <code>meta.yaml</code> gets converted to the corresponding <code>ENV</code> variable.</p>"},{"location":"targets/script/execution-flow/#conditional-execution-of-any-deps-post_deps","title":"Conditional execution of any <code>deps</code>, <code>post_deps</code>","text":"<p>We can use <code>skip_if_env</code> dictionary inside any <code>deps</code>, <code>prehook_deps</code>, <code>posthook_deps</code> or <code>post_deps</code> to make its execution conditional</p>"},{"location":"targets/script/execution-flow/#versions","title":"Versions","text":"<p>We can specify any specific version of a script using <code>version</code>. <code>version_max</code>, <code>version_min</code> and <code>version_max_usable</code> are also possible options. </p> <ul> <li> <p>When <code>version_min</code> is given, any version above this if present in the cache or detected in the system can be chosen. If nothing is detected <code>default_version</code> if present and if above <code>version_min</code> will be used for installation. Otherwise <code>version_max_usable</code> if present or else <code>version_min</code> will be used as <code>version</code>.</p> </li> <li> <p>When <code>version_max</code> is given, any version below this if present in the cache or detected in the system can be chosen. If nothing is detected <code>default_version</code> if present and if below <code>version_max</code> will be used for installation. Otherwise <code>version_max_usable</code> (additional needed input for <code>version_max</code>) will be used as <code>version</code>.</p> </li> </ul>"},{"location":"targets/script/execution-flow/#variations","title":"Variations","text":"<ul> <li>Variations are used to customize MLC script and each set of variations uses a unique cache entry. A variation can turn on <code>env</code> keys and any other meta including dependencies specific to it. Variations are turned on like tags but with a <code>_</code> prefix. For example, if a script is having tags <code>\"get,myscript\"</code>, to call the variation <code>\"test\"</code> inside it, we can use tags <code>\"get,myscript,_test\"</code>. </li> </ul>"},{"location":"targets/script/execution-flow/#variation-groups","title":"Variation groups","text":"<p><code>group</code> is a key to map variations into a group and at any time only one variation from a group can be used in the variation tags. For example, both <code>cpu</code> and <code>cuda</code> can be two variations under the <code>device</code> group, but user can at any time use either <code>cpu</code> or <code>cuda</code> as variation tags but not both.</p>"},{"location":"targets/script/execution-flow/#dynamic-variations","title":"Dynamic variations","text":"<p>Sometimes it is difficult to add all variations needed for a script like say <code>batch_size</code> which can take many different values. To handle this case, we support dynamic variations using '#' where '#' can be dynamically replaced by any string. For example, <code>\"_batch_size.8\"</code> can be used as a tag to turn on the dynamic variation <code>\"_batch_size.#\"</code>.</p>"},{"location":"targets/script/execution-flow/#env-flow-during-mlc-script-execution","title":"ENV flow during MLC script execution","text":"<ul> <li>During a given script execution incoming <code>env</code> dictionary is saved <code>(saved_env)</code> and all the updates happens on a copy of it.</li> <li>Once a script execution is over (which includes all the dependent script executions as well), newly created keys and any updated keys are merged with the <code>saved_env</code> provided the keys are mentioned in <code>new_env_keys</code></li> <li>Same behaviour applies to <code>state</code> dictionary.</li> </ul>"},{"location":"targets/script/execution-flow/#special-env-keys","title":"Special env keys","text":"<ul> <li>Any env key with a prefix <code>MLC_TMP_*</code> and <code>MLC_GIT_*</code> are not passed by default to any dependency. These can be force passed by adding the key(s) to the <code>force_env_keys</code> list of the concerned dependency. </li> <li>Similarly we can avoid any env key from being passed to a given dependency by adding the prefix of the key in the <code>clean_env_keys</code> list of the concerned dependency.</li> <li><code>--input</code> is automatically converted to <code>MLC_INPUT</code> env key</li> <li><code>version</code> is converted to <code>MLC_VERSION</code>, <code>`version_min</code> to <code>MLC_VERSION_MIN</code> and <code>version_max</code> to <code>MLC_VERSION_MAX</code></li> <li>`mlc </li> <li>If <code>env['MLC_GH_TOKEN']=TOKEN_VALUE</code> is set then git URLs (specified by <code>MLC_GIT_URL</code>) are changed to add this token.</li> <li>If <code>env['MLC_GIT_SSH']=yes</code>, then git URLs are changed to SSH from HTTPS.</li> </ul>"},{"location":"targets/script/execution-flow/#script-meta","title":"Script Meta","text":""},{"location":"targets/script/execution-flow/#special-keys-in-script-meta","title":"Special keys in script meta","text":"<ul> <li>TBD: <code>reuse_version</code>, <code>inherit_variation_tags</code>, <code>update_env_tags_from_env</code></li> </ul>"},{"location":"targets/script/execution-flow/#how-cache-works","title":"How cache works?","text":"<ul> <li>If <code>cache=true</code> is set in a script meta, the result of the script execution is cached for further use. </li> <li>For a cached script, <code>env</code> and <code>state</code> updates are done using <code>new_env</code> and <code>new_state</code> dictionaries which are stored in the <code>cm-cached.json</code> file inside the cached folder.</li> <li>By using <code>--new</code> input, a new cache entry can be forced even when an old one exist. </li> <li>By default no depndencies are run for a cached entry unless <code>dynamic</code> key is set for it. </li> </ul> <p>Please see here for trying MLC scripts.</p> <p>\u00a9 2022-25 MLCommons</p>"},{"location":"targets/script/meta/","title":"Script Meta","text":"<p>This page provides a walkthrough of the <code>meta.yaml</code> file.</p>"},{"location":"targets/script/meta/#important-keys-and-data-types","title":"Important Keys and Data Types","text":"<ul> <li> <p>alias (<code>string</code>)   Alias of the script, which can be used instead of tags when running a script.</p> </li> <li> <p>uid (<code>string</code>)   Unique identifier for individual scripts. Can be used instead of tags when running a script.</p> </li> <li> <p>automation_alias (<code>string</code>)   Alias specific to script automation.</p> </li> <li> <p>automation_uid (<code>string</code>)   Unique identifier for script automation.</p> </li> <li> <p>category (<code>string</code>)   Defines the script category.</p> </li> <li> <p>tags (<code>list of strings</code>)   List of tags users can specify to run the script.</p> </li> <li> <p>default_env (<code>dictionary</code> with <code>string</code> values)   Contains key-value pairs representing environment variables and their default values for a script. These default values are overridden if the same environment variable is set in script files or inherited from a parent script.</p> </li> <li> <p>env (<code>dictionary</code> with <code>string</code> values)   Defines environment variables and their corresponding values.</p> </li> <li> <p>input_mapping (<code>dictionary</code> with <code>string</code> values)   Maps input flags related to a script to corresponding environment variables. Only keys specified under <code>input_mapping</code> in <code>meta.yaml</code> are mapped to environment variables.</p> </li> <li> <p>env_key_mapping (<code>dictionary</code> with <code>string</code> values)   Maps one environment key to another just for the <code>run</code> script execution.</p> </li> <li> <p>new_env_keys (<code>list of strings</code>)   Specifies environment keys that should be passed to a parent script if this script is used as a dependency.</p> </li> <li> <p>new_state_keys (<code>list of strings</code>)   Specifies state keys that should be passed to a parent script when used as a dependency.</p> </li> <li> <p>add_deps_recursive (<code>dictionary</code>)   Customizes recursive dependencies with nested <code>tags</code> and other attributes.</p> </li> </ul>"},{"location":"targets/script/meta/#dependencies","title":"Dependencies","text":"<p>Dependencies in a script are specified as a list of dictionaries. Each dictionary can contain:</p> <ul> <li> <p>tags   Comma-separated list of tags to identify a dependent script.</p> </li> <li> <p>names (<code>list of strings</code>)   Identifiers for dependencies, allowing users to modify the dependency execution when needed.</p> </li> <li> <p>enable_if_env (<code>dictionary</code> with <code>list of strings</code> values)   Specifies conditions under which a dependency is enabled based on environment variables. The conditions are ANDed.</p> </li> <li> <p>enable_if_any_env (<code>dictionary</code> with <code>list of strings</code> values)   Specifies conditions under which a dependency is enabled based on environment variables. The conditions are ORed.</p> </li> <li> <p>skip_if_env (<code>dictionary</code> with <code>list of strings</code> values)   Specifies conditions under which a dependency should be skipped. The conditions are ANDed.</p> </li> <li> <p>skip_if_any_env (<code>dictionary</code> with <code>list of strings</code> values)   Specifies conditions under which a dependency should be skipped. The conditions are ORed.</p> </li> </ul> <p>Any other script meta keys can also be included, which will be passed to the dependent script.</p>"},{"location":"targets/script/meta/#types-of-dependencies","title":"Types of Dependencies","text":"<p>In MLC scripts, there are four types of dependencies:</p> <ol> <li> <p>deps    Executes after processing the script meta, but before the <code>preprocess</code> function.</p> </li> <li> <p>prehook_deps    Executes after the <code>preprocess</code> function, but before the <code>run</code> script.</p> </li> <li> <p>posthook_deps    Executes after the <code>run</code> script, but before the <code>postprocess</code> function.</p> </li> <li> <p>post_deps    Executes after the <code>postprocess</code> function.</p> </li> </ol> <p>For more details on script execution flow, see Script Execution Flow.</p>"},{"location":"targets/script/meta/#variation-configuration","title":"Variation Configuration","text":"<ul> <li> <p>variations (<code>dictionary</code>)   Contains script variations, including attributes like <code>alias</code>, <code>default_variations</code>, and <code>group</code>.</p> </li> <li> <p>group (<code>string</code>)   Specifies the script variation group.  </p> <ul> <li>A maximum of one variation from a given group can be selected during script invocation.  </li> <li>If <code>default: true</code> is set for a variation in a group, that variation is turned on by default, unless another variation is specified during script invocation.</li> </ul> </li> <li> <p>default_variations (<code>dictionary</code> with <code>string</code> values)   Specifies default variations for the script.</p> </li> </ul>"},{"location":"targets/script/meta/#docker-configuration","title":"Docker Configuration","text":"<p>The <code>docker</code> key contains Docker-specific configurations:</p> <ul> <li> <p>base_image (<code>string</code>)   Base Docker image.</p> </li> <li> <p>image_name (<code>string</code>)   Docker image name.</p> </li> <li> <p>os (<code>string</code>)   Operating system.</p> </li> <li> <p>os_version (<code>string</code>)   OS version.</p> </li> <li> <p>deps (<code>list of dictionaries</code>)   Specifies dependencies required in Docker.</p> </li> <li> <p>env (<code>dictionary</code> with <code>string</code> values)   Defines environment variables inside the container.</p> </li> <li> <p>interactive (<code>boolean</code>)   Indicates if the container should be interactive.</p> </li> <li> <p>extra_run_args (<code>string</code>)   Additional arguments for <code>docker run</code>.</p> </li> <li> <p>mounts (<code>list of strings</code>)   Specifies mount paths in the format <code>\"source:destination\"</code>.</p> </li> <li> <p>pre_run_cmds (<code>list of strings</code>)   Commands to execute before starting the container.</p> </li> <li> <p>docker_input_mapping (<code>dictionary</code> with <code>string</code> values)   Maps input parameters to Docker environment variables.</p> </li> <li> <p>use_host_user_id (<code>boolean</code>)   Uses the host's user ID inside the container.</p> </li> <li> <p>use_host_group_id (<code>boolean</code>)   Uses the host's group ID inside the container.</p> </li> <li> <p>skip_run_cmd (<code>string</code>)   Command to skip execution.</p> </li> <li> <p>shm_size (<code>string</code>)   Defines shared memory size.</p> </li> <li> <p>real_run (<code>boolean</code>)  </p> <ul> <li><code>true</code>: The container runs the MLC script.  </li> <li><code>false</code>: Only the dependencies are executed.</li> </ul> </li> <li> <p>all_gpus (<code>string</code>)   Use all available GPUs.</p> </li> </ul>"},{"location":"targets/script/native-script/","title":"Native script","text":""},{"location":"targets/script/native-script/#native-script-execution-automatic-script-selection","title":"** Native Script Execution &amp; Automatic Script Selection**","text":"<p>In MLC script execution, the default native script filename is <code>run</code>, with the extension <code>.sh</code> on Unix platforms and <code>.bat</code> on Windows. Users can customize this by providing a different script name using the <code>script_name</code> parameter.  </p> <p>Once the script name is specified, MLC automatically selects the most suitable script variant based on the OS and platform where it is being executed.</p>"},{"location":"targets/script/native-script/#behavior","title":"Behavior","text":"<p>The following explanation assumes the <code>.sh</code> extension for Unix-based systems, but the same logic applies to <code>.bat</code> files on Windows.</p> <ol> <li>Checks Available Scripts:  </li> <li>If no script in the directory starts with <code>\"script_name-\"</code>, the function skips unnecessary checks and returns the default <code>\"script_name.sh\"</code>.</li> <li> <p>If matching scripts exist, it proceeds to find the best match.</p> </li> <li> <p>Priority Order for Script Selection:    The function checks for files in the following order:</p> </li> <li><code>{script_name}-{MLC_HOST_OS_FLAVOR}-{MLC_HOST_OS_VERSION}-{MLC_HOST_PLATFORM_FLAVOR}.sh</code></li> <li><code>{script_name}-{MLC_HOST_OS_FLAVOR}-{MLC_HOST_OS_VERSION}.sh</code></li> <li><code>{script_name}-{MLC_HOST_OS_FLAVOR}-{MLC_HOST_PLATFORM_FLAVOR}.sh</code></li> <li><code>{script_name}-{MLC_HOST_OS_FLAVOR}.sh</code></li> <li><code>{script_name}-{MLC_HOST_OS_FLAVOR_LIKE}-{MLC_HOST_PLATFORM_FLAVOR}.sh</code></li> <li><code>{script_name}-{MLC_HOST_OS_FLAVOR_LIKE}.sh</code></li> <li><code>{script_name}-{MLC_HOST_OS_TYPE}-{MLC_HOST_PLATFORM_FLAVOR}.sh</code></li> <li><code>{script_name}-{MLC_HOST_OS_TYPE}.sh</code></li> <li><code>{script_name}-{MLC_HOST_PLATFORM_FLAVOR}.sh</code></li> <li> <p><code>{script_name}.sh</code> (fallback)</p> </li> <li> <p>Returns the First Matching File </p> </li> <li>If a file is found in the given priority order, it returns the full path.</li> <li>If no prefixed script exists, it returns <code>{path}/{script_name}.sh</code>.</li> </ol>"},{"location":"targets/script/native-script/#example-usage","title":"Example Usage","text":""},{"location":"targets/script/native-script/#example-1-finding-the-most-specific-script","title":"Example 1: Finding the Most Specific Script","text":"<p>\ud83d\udccc Environment Variables <pre><code>env = {\n    'MLC_HOST_OS_FLAVOR': 'ubuntu',\n    'MLC_HOST_OS_FLAVOR_LIKE': 'debian',\n    'MLC_HOST_OS_TYPE': 'linux',\n    'MLC_HOST_OS_VERSION': '20.04',\n    'MLC_HOST_PLATFORM_FLAVOR': 'x86_64'\n}\n</code></pre> \ud83d\udcc2 Available Files in <code>/scripts/</code> <pre><code>run-ubuntu-20.04-x86_64.sh\nrun-ubuntu-20.04.sh\nrun.sh\n</code></pre> \ud83d\udd0d Function Call <pre><code>get_script_name(env, \"/scripts\")\n</code></pre> \u2705 Output <pre><code>\"/scripts/run-ubuntu-20.04-x86_64.sh\"\n</code></pre> \u2714 Explanation: The function finds <code>\"run-ubuntu-20.04-x86_64.sh\"</code> as it has the highest priority.</p>"},{"location":"targets/script/native-script/#example-2-fallback-when-some-variables-are-missing","title":"Example 2: Fallback When Some Variables Are Missing","text":"<p>\ud83d\udccc Environment Variables <pre><code>env = {\n    'MLC_HOST_OS_FLAVOR_LIKE': 'debian',\n    'MLC_HOST_OS_TYPE': 'linux',\n    'MLC_HOST_PLATFORM_FLAVOR': 'arm64'\n}\n</code></pre> \ud83d\udcc2 Available Files in <code>/scripts/</code> <pre><code>run-debian-arm64.sh\nrun.sh\n</code></pre> \ud83d\udd0d Function Call <pre><code>get_script_name(env, \"/scripts\")\n</code></pre> \u2705 Output <pre><code>\"/scripts/run-debian-arm64.sh\"\n</code></pre> \u2714 Explanation: Since <code>MLC_HOST_OS_FLAVOR</code> is missing, the function falls back to <code>MLC_HOST_OS_FLAVOR_LIKE</code> and selects <code>\"run-debian-arm64.sh\"</code>.</p>"},{"location":"targets/script/native-script/#example-3-no-prefixed-scripts-exist","title":"Example 3: No Prefixed Scripts Exist","text":"<p>\ud83d\udccc Environment Variables <pre><code>env = {\n    'MLC_HOST_OS_TYPE': 'linux'\n}\n</code></pre> \ud83d\udcc2 Available Files in <code>/scripts/</code> <pre><code>run.sh\n</code></pre> \ud83d\udd0d Function Call <pre><code>get_script_name(env, \"/scripts\")\n</code></pre> \u2705 Output <pre><code>\"/scripts/run.sh\"\n</code></pre> \u2714 Explanation: Since no prefixed scripts exist, the function returns the default <code>\"run.sh\"</code>.</p>"},{"location":"targets/script/test/","title":"Test Script","text":"<p>TBD</p>"}]}